/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Ventanas;

import java.awt.event.ItemEvent;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.RowSorter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author USUARIO
 */
public class Movimientos extends javax.swing.JFrame {
    Connection base;
    Principal padre;
    ArrayList<String> Id_cosecha;
    ArrayList<String> Id_café_pergamino;
    ArrayList<String> Id_café_oro;
    
    int tipo_actualizacion;
    int posicion_cosecha;
    int posicion_café_oro;
    int posicion_café_pergamino;
    /**
     * Creates new form Inventario_tipo
     */
    public Movimientos() {
        initComponents();
    }

    public Movimientos(Connection base,Principal padre) throws SQLException {
        initComponents();
        this.base = base;
        this.padre = padre;
        Id_cosecha = new ArrayList<>();
        Id_café_pergamino = new ArrayList<>();
        Id_café_oro = new ArrayList<>();
        
        tipo_actualizacion = 1;
        posicion_cosecha = 0;
        posicion_café_oro = 0;
        posicion_café_pergamino = 0;
        
        //Obtener los Id de las cosechas
        Statement b = base.createStatement();
        ResultSet consultab = b.executeQuery("Select cosecha.Id,cosecha.Nombre FROM cosecha ORDER BY cosecha.Id DESC;");
        while(consultab.next()){
            String Id = consultab.getString(1);
            String nombre = consultab.getString(2);
            Id_cosecha.add(Id);
            tx_cosecha.addItem(nombre);
        }
        //Obtener los Id del café pergamino
        b = base.createStatement();
        consultab = b.executeQuery("SELECT cafe.Id,cafe.Nombre FROM cafe WHERE cafe.Pergamino = 1;");
        while(consultab.next()){
            String Id = consultab.getString(1);
            String nombre = consultab.getString(2);
            Id_café_pergamino.add(Id);
            tx_cafe_pergamino.addItem(nombre);
        }
        
        //Obtener los Id del café oro
        b = base.createStatement();
        consultab = b.executeQuery("SELECT cafe.Id,cafe.Nombre FROM cafe WHERE cafe.Oro = 1;");
        while(consultab.next()){
            String Id = consultab.getString(1);
            String nombre = consultab.getString(2);
            Id_café_oro.add(Id);
            tx_cafe_oro.addItem(nombre);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        tx_cosecha = new javax.swing.JComboBox<>();
        jPanel1 = new javax.swing.JPanel();
        bt_todos = new javax.swing.JRadioButton();
        bt_oro = new javax.swing.JRadioButton();
        bt_pergamino = new javax.swing.JRadioButton();
        tx_cafe_oro = new javax.swing.JComboBox<>();
        tx_cafe_pergamino = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        informacion = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Cosecha:");

        tx_cosecha.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                tx_cosechaItemStateChanged(evt);
            }
        });
        tx_cosecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tx_cosechaActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Filtro"));

        bt_todos.setSelected(true);
        bt_todos.setText("Todo");
        bt_todos.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                bt_todosItemStateChanged(evt);
            }
        });

        bt_oro.setText("Café Oro");
        bt_oro.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                bt_oroItemStateChanged(evt);
            }
        });

        bt_pergamino.setText("Café Pergamino");
        bt_pergamino.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                bt_pergaminoItemStateChanged(evt);
            }
        });

        tx_cafe_oro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todos" }));
        tx_cafe_oro.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                tx_cafe_oroItemStateChanged(evt);
            }
        });

        tx_cafe_pergamino.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todos" }));
        tx_cafe_pergamino.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                tx_cafe_pergaminoItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(bt_pergamino)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tx_cafe_pergamino, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(bt_todos)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(bt_oro)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                        .addComponent(tx_cafe_oro, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(bt_todos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bt_oro)
                    .addComponent(tx_cafe_oro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tx_cafe_pergamino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bt_pergamino))
                .addGap(0, 10, Short.MAX_VALUE))
        );

        informacion.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Fecha", "Tipo de Documento", "Numero", "Tipo de Café", "Nombre", "Entrada", "Salida"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(informacion);
        if (informacion.getColumnModel().getColumnCount() > 0) {
            informacion.getColumnModel().getColumn(0).setResizable(false);
            informacion.getColumnModel().getColumn(0).setPreferredWidth(50);
            informacion.getColumnModel().getColumn(1).setResizable(false);
            informacion.getColumnModel().getColumn(1).setPreferredWidth(200);
            informacion.getColumnModel().getColumn(2).setResizable(false);
            informacion.getColumnModel().getColumn(2).setPreferredWidth(30);
            informacion.getColumnModel().getColumn(3).setResizable(false);
            informacion.getColumnModel().getColumn(3).setPreferredWidth(50);
            informacion.getColumnModel().getColumn(4).setResizable(false);
            informacion.getColumnModel().getColumn(4).setPreferredWidth(200);
            informacion.getColumnModel().getColumn(5).setResizable(false);
            informacion.getColumnModel().getColumn(5).setPreferredWidth(50);
            informacion.getColumnModel().getColumn(6).setResizable(false);
            informacion.getColumnModel().getColumn(6).setPreferredWidth(50);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(279, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tx_cosecha, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(90, 90, 90))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tx_cosecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 412, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tx_cosechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tx_cosechaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tx_cosechaActionPerformed

    private void tx_cosechaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_tx_cosechaItemStateChanged
        if(evt.getStateChange() == ItemEvent.SELECTED){
            posicion_cosecha = tx_cosecha.getSelectedIndex();
            Actualizar_Tabla();
        }
    }//GEN-LAST:event_tx_cosechaItemStateChanged

    private void tx_cafe_oroItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_tx_cafe_oroItemStateChanged
        if(evt.getStateChange() == ItemEvent.SELECTED){
            posicion_café_oro = tx_cafe_oro.getSelectedIndex();
            Actualizar_Tabla();
        }
    }//GEN-LAST:event_tx_cafe_oroItemStateChanged

    private void tx_cafe_pergaminoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_tx_cafe_pergaminoItemStateChanged
        if(evt.getStateChange() == ItemEvent.SELECTED){
            posicion_café_pergamino = tx_cafe_pergamino.getSelectedIndex();
            Actualizar_Tabla();
        }
    }//GEN-LAST:event_tx_cafe_pergaminoItemStateChanged

    private void bt_todosItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_bt_todosItemStateChanged
        if(evt.getStateChange() == ItemEvent.SELECTED){
            bt_pergamino.setSelected(false);
            bt_oro.setSelected(false);
            tipo_actualizacion = 1;
            Actualizar_Tabla();
        }else{
           // bt_todos.setSelected(true);
        }
    }//GEN-LAST:event_bt_todosItemStateChanged

    private void bt_oroItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_bt_oroItemStateChanged
        if(evt.getStateChange() == ItemEvent.SELECTED){
            bt_todos.setSelected(false);
            bt_pergamino.setSelected(false);
            tipo_actualizacion = 2;
            Actualizar_Tabla();
        }else{
            //bt_oro.setSelected(true);
        }
    }//GEN-LAST:event_bt_oroItemStateChanged

    private void bt_pergaminoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_bt_pergaminoItemStateChanged
        if(evt.getStateChange() == ItemEvent.SELECTED){
            bt_todos.setSelected(false);
            bt_oro.setSelected(false);
            tipo_actualizacion = 3;
            Actualizar_Tabla();
        }else{
            //bt_pergamino.setSelected(true);
        }
    }//GEN-LAST:event_bt_pergaminoItemStateChanged

    
    public void Actualizar_Tabla(){
        try {
            DefaultTableModel tabla = (DefaultTableModel)informacion.getModel();
            RowSorter<TableModel> aux = new TableRowSorter<TableModel>(tabla);
            tabla.setRowCount(0);
            informacion.setRowSorter(aux);
            if(tipo_actualizacion == 1){
                Statement b;
                b = base.createStatement();
                //Agrego todos los recibos existentes en esa cosecha
                ResultSet consultab = b.executeQuery("SELECT recibo.Fecha,recibo.Codigo,recibo.Peso,cafe.Nombre FROM recibo INNER JOIN cafe ON recibo.Cafe_Id = cafe.Id WHERE recibo.Cosecha_Id = "+Id_cosecha.get(posicion_cosecha)+";");
                while(consultab.next()){
                    String fecha = consultab.getString(1);
                    String codigo = consultab.getString(2);
                    String nombre = consultab.getString(4);
                    String peso =consultab.getString(3);
                    String[] agregar = new String[7];
                    agregar[0] = fecha;
                    agregar[1] = "Recibo";
                    agregar[2] = codigo;
                    agregar[3] = "Pergamino";
                    agregar[4] = nombre;
                    agregar[5] = peso;
                    agregar[6] = "";
                    tabla.addRow(agregar);
                }
                
                //Agrego todas las entradas de café oro que hay
                b= base.createStatement();
                consultab = b.executeQuery("SELECT notarendimiento.FechaNota, notarendimiento.Codigo,cafe.Nombre,producto.PesoFinal FROM producto INNER JOIN notarendimiento ON producto.NotaRendimiento_Codigo = notarendimiento.Codigo INNER JOIN cafe ON producto.Cafe_Id = cafe.Id WHERE notarendimiento.Cosecha_Id = "+Id_cosecha.get(posicion_cosecha)+";");
                while(consultab.next()){
                    String fecha = consultab.getString(1);
                    String codigo = consultab.getString(2);
                    String nombre = consultab.getString(3);
                    String peso =consultab.getString(4);
                    String[] agregar = new String[7];
                    agregar[0] = fecha;
                    agregar[1] = "Nota de Rendimiento";
                    agregar[2] = codigo;
                    agregar[3] = "Oro";
                    agregar[4] = nombre;
                    agregar[5] = peso;
                    agregar[6] = "";
                    tabla.addRow(agregar);
                }
                
                //Agregar todos los consumos de pergamino que hay
                b= base.createStatement();
                consultab = b.executeQuery("SELECT ordentrilla.Fecha, consumo.Recibo_Codigo,ordentrilla.Codigo,cafe.Nombre, consumo.CantidadUtilizado FROM consumo INNER JOIN ordentrilla ON consumo.OrdenTrilla_Codigo = ordentrilla.Codigo INNER JOIN recibo ON consumo.Recibo_Codigo = recibo.Codigo INNER JOIN cafe ON recibo.Cafe_Id = cafe.Id WHERE ordentrilla.Cosecha_Id = "+Id_cosecha.get(posicion_cosecha)+";");
                while(consultab.next()){
                    String fecha = consultab.getString(1);
                    String codigo_recibo = consultab.getString(2);
                    String codigo_ordentrilla = consultab.getString(3);
                    String nombre = consultab.getString(4);
                    String peso =consultab.getString(5);
                    String[] agregar = new String[7];
                    agregar[0] = fecha;
                    agregar[1] = "Orden de trilla (Recibo No."+codigo_recibo+")";
                    agregar[2] = codigo_ordentrilla;
                    agregar[3] = "Pergamino";
                    agregar[4] = nombre;
                    agregar[5] = "";
                    agregar[6] = peso;
                    tabla.addRow(agregar);
                }
            }else if(tipo_actualizacion == 2){
                //Agrego todas las entradas de café oro que hay
                Statement b;
                b= base.createStatement();
                if(posicion_café_oro== 0){
                    //Agrego todas las entradas de café oro
                ResultSet consultab = b.executeQuery("SELECT notarendimiento.FechaNota, notarendimiento.Codigo,cafe.Nombre,producto.PesoFinal FROM producto INNER JOIN notarendimiento ON producto.NotaRendimiento_Codigo = notarendimiento.Codigo INNER JOIN cafe ON producto.Cafe_Id = cafe.Id WHERE notarendimiento.Cosecha_Id = "+Id_cosecha.get(posicion_cosecha)+";");
                while(consultab.next()){
                    String fecha = consultab.getString(1);
                    String codigo = consultab.getString(2);
                    String nombre = consultab.getString(3);
                    String peso =consultab.getString(4);
                    String[] agregar = new String[7];
                    agregar[0] = fecha;
                    agregar[1] = "Nota de Rendimiento";
                    agregar[2] = codigo;
                    agregar[3] = "Oro";
                    agregar[4] = nombre;
                    agregar[5] = peso;
                    agregar[6] = "";
                    tabla.addRow(agregar);
                }
                }else{
                    //Agrego todas las entradas de café oro pero especifico
                    ResultSet consultab = b.executeQuery("SELECT notarendimiento.FechaNota, notarendimiento.Codigo,cafe.Nombre,producto.PesoFinal FROM producto INNER JOIN notarendimiento ON producto.NotaRendimiento_Codigo = notarendimiento.Codigo INNER JOIN cafe ON producto.Cafe_Id = cafe.Id WHERE notarendimiento.Cosecha_Id ="+Id_cosecha.get(posicion_cosecha)+" AND producto.Cafe_Id = "+Id_café_oro.get(posicion_café_oro)+";");
                while(consultab.next()){
                    String fecha = consultab.getString(1);
                    String codigo = consultab.getString(2);
                    String nombre = consultab.getString(3);
                    String peso =consultab.getString(4);
                    String[] agregar = new String[7];
                    agregar[0] = fecha;
                    agregar[1] = "Nota de Rendimiento";
                    agregar[2] = codigo;
                    agregar[3] = "Oro";
                    agregar[4] = nombre;
                    agregar[5] = peso;
                    agregar[6] = "";
                    tabla.addRow(agregar);
                }
                }
            }else{
                   Statement b;
                   b = base.createStatement();
                   if(posicion_café_pergamino == 0){
                       //Agrego todos los recibos de café pergamino
                       ResultSet consultab = b.executeQuery("SELECT recibo.Fecha,recibo.Codigo,recibo.Peso,cafe.Nombre FROM recibo INNER JOIN cafe ON recibo.Cafe_Id = cafe.Id WHERE recibo.Cosecha_Id = "+Id_cosecha.get(posicion_cosecha)+";");
                        while(consultab.next()){
                            String fecha = consultab.getString(1);
                            String codigo = consultab.getString(2);
                            String nombre = consultab.getString(4);
                            String peso =consultab.getString(3);
                            String[] agregar = new String[7];
                            agregar[0] = fecha;
                            agregar[1] = "Recibo";
                            agregar[2] = codigo;
                            agregar[3] = "Pergamino";
                            agregar[4] = nombre;
                            agregar[5] = peso;
                            agregar[6] = "";
                            tabla.addRow(agregar);
                        }
                        //Agrego todos los consumos de café pergamino
                        b= base.createStatement();
                        consultab = b.executeQuery("SELECT ordentrilla.Fecha, consumo.Recibo_Codigo,ordentrilla.Codigo,cafe.Nombre, consumo.CantidadUtilizado FROM consumo INNER JOIN ordentrilla ON consumo.OrdenTrilla_Codigo = ordentrilla.Codigo INNER JOIN recibo ON consumo.Recibo_Codigo = recibo.Codigo INNER JOIN cafe ON recibo.Cafe_Id = cafe.Id WHERE ordentrilla.Cosecha_Id = "+Id_cosecha.get(posicion_cosecha)+";");
                        while(consultab.next()){
                            String fecha = consultab.getString(1);
                            String codigo_recibo = consultab.getString(2);
                            String codigo_ordentrilla = consultab.getString(3);
                            String nombre = consultab.getString(4);
                            String peso =consultab.getString(5);
                            String[] agregar = new String[7];
                            agregar[0] = fecha;
                            agregar[1] = "Orden de trilla (Recibo No."+codigo_recibo+")";
                            agregar[2] = codigo_ordentrilla;
                            agregar[3] = "Pergamino";
                            agregar[4] = nombre;
                            agregar[5] = "";
                            agregar[6] = peso;
                            tabla.addRow(agregar);
                        }
                   }else{
                       //Agrego todos los recibos de café pergamino especifico
                       ResultSet consultab = b.executeQuery("SELECT recibo.Fecha,recibo.Codigo,recibo.Peso,cafe.Nombre FROM recibo INNER JOIN cafe ON recibo.Cafe_Id = cafe.Id WHERE recibo.Cosecha_Id = "+Id_cosecha.get(posicion_cosecha)+" AND cafe.Id = "+Id_café_pergamino.get(posicion_café_pergamino)+";");
                        while(consultab.next()){
                            String fecha = consultab.getString(1);
                            String codigo = consultab.getString(2);
                            String nombre = consultab.getString(4);
                            String peso =consultab.getString(3);
                            String[] agregar = new String[7];
                            agregar[0] = fecha;
                            agregar[1] = "Recibo";
                            agregar[2] = codigo;
                            agregar[3] = "Pergamino";
                            agregar[4] = nombre;
                            agregar[5] = peso;
                            agregar[6] = "";
                            tabla.addRow(agregar);
                        }
                        //Agrego todos los consumos de café pergamino especifico
                        b= base.createStatement();
                        consultab = b.executeQuery("SELECT ordentrilla.Fecha, consumo.Recibo_Codigo,ordentrilla.Codigo,cafe.Nombre, consumo.CantidadUtilizado FROM consumo INNER JOIN ordentrilla ON consumo.OrdenTrilla_Codigo = ordentrilla.Codigo INNER JOIN recibo ON consumo.Recibo_Codigo = recibo.Codigo INNER JOIN cafe ON recibo.Cafe_Id = cafe.Id WHERE ordentrilla.Cosecha_Id = "+Id_cosecha.get(posicion_cosecha)+" AND cafe.Id = "+Id_café_pergamino.get(posicion_café_pergamino)+";");
                        while(consultab.next()){
                            String fecha = consultab.getString(1);
                            String codigo_recibo = consultab.getString(2);
                            String codigo_ordentrilla = consultab.getString(3);
                            String nombre = consultab.getString(4);
                            String peso =consultab.getString(5);
                            String[] agregar = new String[7];
                            agregar[0] = fecha;
                            agregar[1] = "Orden de trilla (Recibo No."+codigo_recibo+")";
                            agregar[2] = codigo_ordentrilla;
                            agregar[3] = "Pergamino";
                            agregar[4] = nombre;
                            agregar[5] = "";
                            agregar[6] = peso;
                            tabla.addRow(agregar);
                        }
                   }
            }
            informacion.getRowSorter().toggleSortOrder(0);
        } catch (SQLException ex) {
            Logger.getLogger(Movimientos.class.getName()).log(Level.SEVERE, null, ex);
            
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Movimientos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Movimientos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Movimientos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Movimientos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Movimientos().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton bt_oro;
    private javax.swing.JRadioButton bt_pergamino;
    private javax.swing.JRadioButton bt_todos;
    private javax.swing.JTable informacion;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> tx_cafe_oro;
    private javax.swing.JComboBox<String> tx_cafe_pergamino;
    private javax.swing.JComboBox<String> tx_cosecha;
    // End of variables declaration//GEN-END:variables

   
}
